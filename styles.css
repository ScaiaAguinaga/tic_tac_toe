/* Box sizing for all elements */
*, *::after, *::before {
    box-sizing: border-box;
}

/* Root variables for cell and mark size */
:root {
    --cell-size: 100px;
    --mark-size: calc(var(--cell-size) * .9);
}

body {
    margin: 0;
}

/* Styling for the game board */
/* Creates a 3x3 grid used as board */
.board {
    /* Center the board */
    width: 100vw;
    height: 100vh;
    display: grid;
    justify-content: center;
    align-content: center;
    justify-items: center;
    align-items: center;
    grid-template-columns: repeat(3, auto)
}

/* Styling for individual cells */
.cell {
    width: var(--cell-size);
    height: var(--cell-size);
    border: 1px solid black;
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
    cursor: pointer;
}

/* Remove outer borders to mimic tic-tac-toe board */
/* Top */
.cell:first-child,
.cell:nth-child(2),
.cell:nth-child(3) {
    border-top: none;
}

/* Left */
.cell:nth-child(3n + 1) {
    border-left: none;
}

/* Right */
.cell:nth-child(3n) {
    border-right: none;
}

/* Bottom */
.cell:last-child,
.cell:nth-child(8),
.cell:nth-child(7) {
    border-bottom: none;
}

/* Informs player of invalid move*/
.cell.x,
.cell.circle {
    cursor: not-allowed;
}

/* Sets background color for marks to black for completed moves */
.cell.x::before,
.cell.x::after,
.cell.circle::before,
.cell.circle::after {
    background-color: black;
}

/* Sets background color for marks to grey for available moves */
.board.x .cell:not(.x):not(.circle):hover::before,
.board.x .cell:not(.x):not(.circle):hover::after,
.board.circle .cell:not(.x):not(.circle):hover::before,
.board.circle .cell:not(.x):not(.circle):hover::after {
    background-color: lightgrey;
}

/* Creates both bars used to form the X mark */
.cell.x::before,
.cell.x::after,
.board.x .cell:not(.x):not(.circle):hover::before,
.board.x .cell:not(.x):not(.circle):hover::after {
    content: '';
    position: absolute;
    width: calc(var(--mark-size) * .15);
    height: var(--mark-size);
}

/* Makes bars for X mark into a cross */
.cell.x::before,
.board.x .cell:not(.x):not(.circle):hover::before {
    transform: rotate(45deg);
}

.cell.x::after,
.board.x .cell:not(.x):not(.circle):hover::after {
    transform: rotate(-45deg);
}

/* Turns element into circle to make O mark */
.cell.circle::before,
.cell.circle::after,
.board.circle  .cell:not(.x):not(.circle):hover::before,
.board.circle  .cell:not(.x):not(.circle):hover::after {
    content: '';
    position: absolute;
    border-radius: 50%;
}

/* Sets dimensions of circle mark */
.cell.circle::before,
.board.circle  .cell:not(.x):not(.circle):hover::before {
    width: calc(var(--mark-size) * .85);
    height: calc(var(--mark-size) * .85);
}

/* Adds white circle to make circle mark hollow */
.cell.circle::after,
.board.circle  .cell:not(.x):not(.circle):hover::after {
    width: calc(var(--mark-size) * .55);
    height: calc(var(--mark-size) * .55);
    background-color: white;
}

/* Styling for the winning message display */
.winning-message {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, .9);
    justify-content: center;
    align-items: center;
    color: white;
    font-size: 5rem;
    flex-direction: column;
}

/* Styling for the restart button */
.winning-message button {
    font-size: 3rem;
    background-color: white;
    border: 1px solid black;
    padding: .25em .5em;
    cursor: pointer;
}

/* Invert restart button when hovered */
.winning-message button:hover {
    background-color: black;
    color: white;
    border-color: white;
}

/* Display the winning message container when the "show" class is applied */
.winning-message.show {
    display: flex;
}